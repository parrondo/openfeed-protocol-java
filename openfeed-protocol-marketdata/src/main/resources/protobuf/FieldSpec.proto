/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Non-java (C, C++, etc) package name space.
package barchart_data;

// Builder options.
option java_package = "com.barchart.proto.buf.data";
option java_outer_classname = "FieldSpec";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

//
/**
 *
 * head/entry contracts:
 *
 * actualValue = headValue + entryOffset
 * or
 * actualValue = entryOverride over headDefault
 *
 */
//
/**
  * enum value wire size rules
  *
  * note: value in 0...127 takes 1 byte on wire
  *
  * note: value in 128.... takes varInt128 more bytes on wire
  *
  * keep most frequent values first
  *
  */
//
/**
 * field tag wire size rules
 *
 * note: field number 1..15 is 1 byte tag, 16..127 is 2 byte tag
 */

// Market data entry.
message MarketEntry {

	// Entry action.
	enum Action {
		ADD = 0; // new, create, insert
		EDIT = 1; // merge, modify, replace, override, overlay
		REMOVE = 2; // delete, erase, clear, reset
	}

	// Primary entry category.
	// Keep most frequent first.
	enum Type {
		TRADE = 0; // a.k.a last sale; price & size (size mostly present)
		BID = 1; // book side
		ASK = 2; // book side
		CHANGE = 3; // such as price change from previous day
		UNDERLYING = 4; // such as option/spread underlying price
		VOLUME = 5;
		OPEN = 6;
		HIGH = 7;
		LOW = 8;
		CLOSE = 9; // a.k.a last sale, before close; price; (size mostly absent)
		SETTLE = 10;
		INTEREST = 11;
		CUVOL = 12; // cumulative volume
		STATUS = 13; // non price/size change; such as OPEN/CLOSE event
		SEQUENCE = 14; //such as snapshot & update sequence synchronization index
		UNKNOWN = 127;
		// keep under 128
	}

	// Secondary entry category a.k.a entry annotation.
	// Keep in "name-space-like" format.
	enum Descriptor {
		BOOK_IMPLIED = 0; // ICE, CME
		BOOK_RFQ = 1; // ICE
		SETTLE_UNOFFICIAL = 2; // ICE
		SETTLE_PRELIMINARY = 3; // CME
		SETTLE_THEORETICAL = 4; // CME
		PERIOD_DAY = 10;
		PERIOD_WEEK = 11;
		PERIOD_MONTH = 12;
		PERIOD_YEAR = 13;
		LAST_BEST = 14;
		SESSION_HIGH = 20;
		SESSION_LOW = 21;
		ADJUSTED_TRADE = 30;

		// such as FORM-T
		SESSION_OVERNIGHT = 50; //
		//
		ORDER_COUNT = 60;
		IMPLIED_QUANTITY = 61;
		IMPLIED_ORDER_COUNT = 62;
		NUMBER_OF_BOOK_ENTRIES = 70;
		LAST_MESSAGE_SEQUENCE = 71;
		PERCENTAGE = 72;
		OVER_THE_COUNTER = 73;
		EXCHANGE_TRADED = 74;
		OPTION_THEORETICAL_BID = 80;
		OPTION_THEORETICAL_ASK = 81;
		OPTION_DELTA = 82;
		OPTION_VEGA = 83;
		STATUS_MARKET_OPEN = 100; // OPRA, ICE
		STATUS_MARKET_CLOSE = 101; // OPRA, ICE
		STATUS_MARKET_PRE_OPEN = 102; // OPRA, ICE
		STATUS_MARKET_PRE_CLOSE = 103; // OPRA, ICE
		STATUS_TRADING_PAUSE = 104;
		STATUS_TRADING_RESUME = 105;
		STATUS_MARKET_EXPIRED = 106;

		// keep under 128
		//
		SIDE_FIRM = 110; // OPRA
		SIDE_CUSTOMER = 111; // OPRA
		INDEX_ON_TRADE = 112; // OPRA
		INDEX_ON_BOOK = 113; // OPRA
		VOLUME_BLOCK = 120; // ICE
		VOLUME_EFS = 121; // ICE
		VOLUME_EFP = 122; // ICE
		PRICE_VWAP = 123; // ICE

		// FIXME
		PRICE_SYSTEM = 124; // ICE IsSystemPricedLeg. Update: Don't use this.  All SystemPriceLegs are either SYSTEM_PRICED_CRACK_SPREAD_LEG or SYSTEM_PRICED_LEG
		//
		TRADE_BLOCK = 125; // ICE
		TRADE_CANCELED = 126; // ICE
		TRADE_INVESTIGATED = 127; // ICE

		// keep under 128

		// TODO: Optimize the codes
		BLOCK_TRADE = 200;
		EFP_TRADE = 201;
		EFS_TRADE = 202;
		BILATERAL_OFF_EXCHANGE_TRADE = 203;
		NG_EFP_EFS_TRADE = 204;
		CCX_EFP_TRADE = 205;
		EFR_TRADE = 206;
		SYSTEM_PRICED_CRACK_SPREAD_LEG = 207;
		SYSTEM_PRICED_LEG = 208;
		IMPLIED_SPREAD_AT_MARKET_OPEN = 209;
	}

	// Entry action.
	optional Action action = 1;

	// Primary entry category.
	optional Type type = 2;

	// Secondary entry category list.
	repeated Descriptor descriptor = 3 [packed = true];

	// Globally unique market id.
	// Override to message head;
	optional sint64 marketId = 4;

	// Market sequence number.
	// Offset to message head;
	optional sint64 sequence = 5;

	// Transaction time stamp.
	// Offset to message head, millis (non fix).
	optional sint64 timeStamp = 6;

	// Entry trade date.
	// Offset to message head, millis (non fix).
	optional sint32 tradeDate = 7;

	// Entry price value.
	optional sint64 priceMantissa = 8;
	optional sint32 priceExponent = 9; // override to head;

	// Entry size value.
	optional sint64 sizeMantissa = 10;
	optional sint32 sizeExponent = 11; // override to head;

	// Entry index.
	// Such as book level, cuvol position, snapshot & update sequence, etc.
	optional sint64 index = 12;

	// Market order id of this entry.
	optional sint64 orderId = 13;

	// Market order count in this entry.
	optional sint32 orderCount = 14;

	//
}
