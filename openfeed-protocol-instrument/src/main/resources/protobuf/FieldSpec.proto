/**
 * Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com/>
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 * http://www.opensource.org/licenses/bsd-license.php
 */

// Non-java (C, C++, etc) package name space.
package barchart_inst;

// Builder options.
option java_package = "com.barchart.proto.buf.inst";
option java_outer_classname = "FieldSpec";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

// Message options descriptor.
import "google/protobuf/descriptor.proto";

// Instrument type.
enum InstrumentType {
	NO_TYPE_INST = 0;
	FOREX_INST = 1;
	INDEX_INST = 2;
	EQUITY_INST = 3;
	FUTURE_INST = 4;
	OPTION_INST = 5;
	SPREAD_INST = 6;
}

// Market depth liquidity type.
enum BookLiquidity {
	// Market without any book.
	NO_BOOK_LIQUIDITY = 0;
	// Unspecified/Default liquidity type.
	DEFAULT_LIQUIDITY = 1;
	// Book reflects only implied transactions.
	IMPLIED_LIQUIDITY = 2;
	// Book reflects both implied and explicit transactions.
	COMBINED_LIQUIDITY = 3;
}

// Market depth structure / implementation.
enum BookStructure {
	// Market without any book.
	NO_BOOK_STRUCTURE = 0;
	// Book uses explicit level/index
	PRICE_LEVEL_STRUCTURE = 1;
	// Book uses price entry value.
	PRICE_VALUE_STRUCTURE = 2;
	// Book uses order number.
	ORDER_NUMBER_STRUCTURE = 3;
}

// Option type.
enum OptionType {
	CALL_OPTION = 1;
	PUT_OPTION = 2;
}

// Option style.
enum OptionStyle {
	DEFAULT_STYLE = 0;
	AMERICAN_STYLE = 1;
	EUROPEAN_STYLE = 2;
}

// Spread type.
enum SpreadType {
	DEFAULT_SPREAD = 0;
	CALENDAR = 1;
	FX_CALENDAR= 2;
	REDUCED_TICK_CALENDAR = 3;
	EQUITY_CALENDAR_SPREAD = 4;
	BUTTERFLY_FUTURES = 5;
	CONDOR_FUTURES = 6;
	STRIP_FUTURES = 7;
	INTERCOMMODITY_SPREAD = 8;
	PACK = 9;
	MONTH_PACK = 10;
	PACK_BUTTERFLY = 11;
	DOUBLE_BUTTERFLY = 12;
	PACK_SPREAD = 13;
	CRACK_1TO1 = 14;
	BUNDLE = 15;
	BUNDLE_SPREAD = 16;
	IMPLIED_TREASURY_INTERCOMMODITY_SPREAD = 17;
	TAS_CALENDAR_SPREAD = 18;
	COMMODITIES_INTERCOMMODITY_SPREAD = 19;
	BOND_INDEX_SPREAD = 20;
	BMD_FUTURES_STRIP = 21;

	THREE_WAY = 100;
	THREE_WAY_STRADDLE_VS_CALL = 101;
	THREE_WAY_STRADDLE_VS_PUT = 102;
	BOX = 103;
	BUTTERFLY_OPTIONS = 104;
	XMAS_TREE = 105;
	CONDITIONAL_CURVE = 106;
	CONDOR_OPTIONS = 107;
	DOUBLE = 108;
	HORIZONTAL = 109;
	HORIZONTAL_STRADDLE = 110;
	IRON_CONDOR = 111;
	RATIO_1X2 = 112;
	RATIO_1X3 = 113;
	RATIO_2X3 = 114;
	RISK_REVERSAL = 115;
	STRADDLE_STRIP = 116;
	STRADDLE = 117;
	STRANGLE = 118;
	STRIP_OPTIONS = 119;
	VERTICAL = 120;
	JELLY_ROLL = 121;
	IRON_BUTTERFLY = 122;
	GUTS = 123;
	GENERIC = 124;
}

enum Month {
	JANUARY_MONTH = 0;
	FEBRUARY_MONTH = 1;
	MARCH_MONTH = 2;
	APRIL_MONTH = 3;
	MAY_MONTH = 4;
	JUNE_MONTH = 5;
	JULY_MONTH = 6;
	AUGUST_MONTH = 7;
	SEPTEMBER_MONTH = 8;
	OCTOBER_MONTH = 9;
	NOVEMBER_MONTH = 10;
	DECEMBER_MONTH = 11;
}

enum State {
	ACTIVE_STATE = 0;
	PASSIVE_STATE = 1;
}


// Price value.
message Decimal {
	optional sint64 mantissa = 1;
	optional sint32 exponent = 2;
}

// Time interval.
message Interval {

	// Beginning of time interval.
	optional sint64 timeStart = 1; // millisFIX, can be UTC or local time zone.

	// Ending of time interval.
	optional sint64 timeFinish = 2; // millisFIX, can be UTC or local time zone.
}

// Market life cycle events.
message Calendar {

	// Time span between market inception and termination, millisFIX, UTC.
	// FIXME define range limit values: plus/minus infinity, missing, etc?
	optional Interval lifeTime = 1;

	// Standard market hours, millisFIX.
	// FIXME static? dynamic? local market time zone? UTC?
	repeated Interval marketHours = 2;
}


message SymbolExpiration {
	optional sint32 dayOfMonth = 1;
	optional Month month = 2;
	optional sint32 year = 3;
}

message SpreadLeg {

	// The marketId of the leg
	optional sint64 marketId = 1;

	// The ratio of the this leg with respect to the spread.
	// Negative means short the absolute value, positive means long the absolute value.
	// FIXME? Alternatively, we could have separate LONG/SHORT indicator in the message
	// and use this field as only the absolute value
	optional sint32 ratio = 2;

	// Additional information about the leg will be found in the instrument definition
	// for the leg.  It is not included here to reduce duplication.
}